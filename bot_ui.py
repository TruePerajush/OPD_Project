import os
import re
from pathlib import Path
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler
)

class Config:
    EMOJI = {
        "books": "üìö", "shelves": "üóÇ", "notes": "‚úçÔ∏è", "quotes": "‚≠ê",
        "stats": "üìä", "goals": "üéØ", "help": "‚ÑπÔ∏è", "back": "üîô",
        "add": "‚ûï", "search": "üîç", "tags": "üè∑", "year": "üìÖ",
        "quote": "üí¨", "author": "‚úçÔ∏è", "genre": "üè∑", "rating": "‚≠ê",
        "characters": "üë•", "reminders": "‚è∞", "confirm": "‚úÖ", "cancel": "‚ùå"
    }

class States:
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥
    ADD_BOOK_TITLE = 0
    ADD_BOOK_AUTHOR = 1
    CONFIRM_API_DATA = 2
    ADD_BOOK_GENRE_MANUALLY = 3
    ADD_BOOK_GENRE = 4
    ADD_BOOK_YEAR = 5
    ADD_BOOK_STATUS = 6
    CONFIRM_BOOK_DATA = 7

    # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞
    SEARCH_METHOD = 8
    SEARCH_BY_TITLE = 9
    SEARCH_BY_AUTHOR = 10
    SEARCH_BY_GENRE = 11
    SEARCH_BY_YEAR = 12
    SEARCH_RESULTS = 13
    ADD_BOOK_START = 14

    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–∏—Ö –∫–Ω–∏–≥
    CONFIRM_AUTHOR = 15
    MY_BOOKS_MENU = 16
    BOOKS_BY_STATUS = 17
    BOOK_DETAILS = 18
    EDIT_BOOK = 19
    BOOKS_MENU = 20

    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
    ADD_NOTE_BOOK = 21
    ADD_NOTE_TEXT = 22
    ADD_NOTE_RATING = 23
    CONFIRM_NOTE = 24
    NOTES_MENU = 25
    SELECT_BOOK_FOR_NOTE = 26
    EDIT_EXISTING_NOTE = 27

    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ü–∏—Ç–∞—Ç
    ADD_QUOTE_BOOK = 28
    ADD_QUOTE_TEXT = 29
    ADD_QUOTE_PAGE = 30
    CONFIRM_QUOTE = 31
    QUOTES_MENU = 32
    SELECT_BOOK_FOR_QUOTE = 33
    LIST_QUOTES = 34
    EDIT_QUOTE = 35
    DELETE_QUOTE = 36
    QUOTE_DETAILS = 37

    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ü–µ–ª–µ–π
    SETUP_GOALS_QUESTION = 38
    SET_YEARLY_GOAL = 39
    SET_MONTHLY_GOAL = 40
    SET_WEEKLY_GOAL = 41
    SET_DAILY_MINUTES = 42
    SET_REMINDER = 43
    SET_REMINDER_TIME = 44
    CONFIRM_GOALS = 45
    EDIT_GOALS = 46

    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    STATS_MENU = 47
    REPORT_SETTINGS = 48
    SET_REPORT_FREQ = 49
    SET_REPORT_TIME = 50


class BookBot:
    def __init__(self):
        self.user_data = {}

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    def main_menu_keyboard(self):
        return ReplyKeyboardMarkup([
            [f"{Config.EMOJI['books']} –ö–Ω–∏–≥–∏", f"{Config.EMOJI['notes']} –ó–∞–º–µ—Ç–∫–∏", f"{Config.EMOJI['quotes']} –¶–∏—Ç–∞—Ç—ã"],
            [f"{Config.EMOJI['goals']} –¶–µ–ª–∏", f"{Config.EMOJI['stats']} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", f"{Config.EMOJI['help']} –ü–æ–º–æ—â—å"]
        ], resize_keyboard=True)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        welcome_msg = (
            f"{Config.EMOJI['books']} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–∏—Ç–∞—Ç–µ–ª—å—Å–∫–∏–π –¥–Ω–µ–≤–Ω–∏–∫!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        await update.message.reply_text(welcome_msg, reply_markup=self.main_menu_keyboard())
        return ConversationHandler.END

    def back_button(self):
        return [InlineKeyboardButton(f"{Config.EMOJI['back']} –ù–∞–∑–∞–¥", callback_data="back")]

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    async def handle_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text

        if text == f"{Config.EMOJI['books']} –ö–Ω–∏–≥–∏":
            await self.books_menu(update, context)
        elif text == f"{Config.EMOJI['notes']} –ó–∞–º–µ—Ç–∫–∏":
            return await self.notes_menu(update, context)
        elif text == f"{Config.EMOJI['quotes']} –¶–∏—Ç–∞—Ç—ã":
            return await self.quotes_menu(update, context)
        elif text == f"{Config.EMOJI['goals']} –¶–µ–ª–∏":
            return await self.goals_menu(update, context)
        elif text == f"{Config.EMOJI['stats']} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await self.show_stats(update, context)
        elif text == f"{Config.EMOJI['help']} –ü–æ–º–æ—â—å":
            await self.help_menu(update, context)
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
                reply_markup=self.main_menu_keyboard()
            )
        return ConversationHandler.END

    # –†–∞–∑–¥–µ–ª –∫–Ω–∏–≥
    # –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∞–º–∏
    async def books_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(f"{Config.EMOJI['add']} –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", callback_data="add_book")],
            [InlineKeyboardButton(f"{Config.EMOJI['search']} –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏", callback_data="search_book")],
            [InlineKeyboardButton(f"{Config.EMOJI['books']} –ú–æ–∏ –∫–Ω–∏–≥–∏", callback_data="my_books")]
            # self.back_button()
        ])

        if update.callback_query:
            await update.callback_query.edit_message_text(
                f"{Config.EMOJI['books']} –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏:",
                reply_markup=keyboard
            )
        else:
            await update.message.reply_text(
                f"{Config.EMOJI['books']} –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏:",
                reply_markup=keyboard
            )
        return ConversationHandler.END

    # –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
    async def add_book_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            f"{Config.EMOJI['books']} –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:",
            reply_markup=InlineKeyboardMarkup([self.back_button()])
        )
        return States.ADD_BOOK_TITLE

    async def add_book_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self.user_data[update.message.from_user.id] = {'title': update.message.text}
        await update.message.reply_text(
            f"{Config.EMOJI['author']} –í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ (–§–æ—Ä–º–∞—Ç: –§–∞–º–∏–ª–∏—è –ò–º—è):",
            reply_markup=InlineKeyboardMarkup([self.back_button()])
        )
        return States.ADD_BOOK_AUTHOR

    async def add_book_author(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self.user_data[update.message.from_user.id]['author'] = update.message.text

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É
        # book_data = await self.search_book_api(title, author)
        # –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ:
        if False:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ API
            book_data = {}  # –≠—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API
            self.user_data[update.message.from_user.id].update(book_data)

            confirmation_msg = (
                f"{Config.EMOJI['books']} –î–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:\n\n"
                f"üìñ –ù–∞–∑–≤–∞–Ω–∏–µ: {book_data.get('title', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {book_data.get('author', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üè∑ –ñ–∞–Ω—Ä: {book_data.get('genre', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üìÖ –ì–æ–¥: {book_data.get('year', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"{Config.EMOJI['confirm']} –í—Å–µ –≤–µ—Ä–Ω–æ?"
            )

            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton(f"{Config.EMOJI['confirm']} –î–∞", callback_data="confirm_api_data_yes"),
                    InlineKeyboardButton(f"{Config.EMOJI['cancel']} –ù–µ—Ç", callback_data="confirm_api_data_no")
                ],
                self.back_button()
            ])

            await update.message.reply_text(confirmation_msg, reply_markup=keyboard)
            return States.CONFIRM_API_DATA
        else:
            await update.message.reply_text(
                "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ:",
                reply_markup=InlineKeyboardMarkup([self.back_button()])
            )
            return States.ADD_BOOK_GENRE_MANUALLY

    async def confirm_api_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        if query.data == "confirm_api_data_no":
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ:",
                reply_markup=InlineKeyboardMarkup([self.back_button()])
            )
            return States.ADD_BOOK_GENRE_MANUALLY
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∞—Ç—É—Å–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –¥–∞–Ω–Ω—ã–µ –∏–∑ API
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üìñ –ß–∏—Ç–∞—é —Å–µ–π—á–∞—Å", callback_data="status_reading"),
                    InlineKeyboardButton("‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ", callback_data="status_finished")
                ],
                [
                    InlineKeyboardButton("üí§ –û—Ç–ª–æ–∂–µ–Ω–æ", callback_data="status_paused"),
                    InlineKeyboardButton("üìÖ –ü–ª–∞–Ω–∏—Ä—É—é", callback_data="status_planned")
                ],
                self.back_button()
            ])

            await query.edit_message_text(
                f"{Config.EMOJI['books']} –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–Ω–∏–≥–∏:",
                reply_markup=keyboard
            )
            return States.ADD_BOOK_STATUS

    async def add_book_genre_manually(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("–ö–ª–∞—Å—Å–∏–∫–∞", callback_data="genre_classic"),
                InlineKeyboardButton("–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", callback_data="genre_fantasy")
            ],
            [
                InlineKeyboardButton("–ù–∞—É–∫–∞", callback_data="genre_science"),
                InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="genre_other")
            ],
            self.back_button()
        ])
        await update.message.reply_text(
            f"{Config.EMOJI['genre']} –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:",
            reply_markup=keyboard
        )
        return States.ADD_BOOK_GENRE

    async def add_book_genre(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        genre = query.data.replace("genre_", "")
        self.user_data[query.from_user.id]['genre'] = genre
        await query.edit_message_text(
            f"{Config.EMOJI['year']} –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –∏–∑–¥–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2001):\n\n–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å /skip",
            reply_markup=InlineKeyboardMarkup([self.back_button()])
        )
        return States.ADD_BOOK_YEAR

    async def add_book_year(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.message.text != '/skip':
            self.user_data[update.message.from_user.id]['year'] = update.message.text

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìñ –ß–∏—Ç–∞—é —Å–µ–π—á–∞—Å", callback_data="status_reading"),
                InlineKeyboardButton("‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ", callback_data="status_finished")
            ],
            [
                InlineKeyboardButton("üí§ –û—Ç–ª–æ–∂–µ–Ω–æ", callback_data="status_paused"),
                InlineKeyboardButton("üìÖ –ü–ª–∞–Ω–∏—Ä—É—é", callback_data="status_planned")
            ],
            self.back_button()
        ])

        await update.message.reply_text(
            f"{Config.EMOJI['books']} –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–Ω–∏–≥–∏:",
            reply_markup=keyboard
        )
        return States.ADD_BOOK_STATUS

    async def update_book_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        _, status, book_id = query.data.split("_", 2)

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        # await self.update_book_status_in_db(book_id, status)

        await query.answer(f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {self._get_status_name(status)}")
        return await self.show_book_details(update, context)

    async def add_book_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        status = query.data.replace("status_", "")
        self.user_data[query.from_user.id]['status'] = status

        book_data = self.user_data[query.from_user.id]
        confirmation_msg = (
            f"{Config.EMOJI['books']} –î–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:\n\n"
            f"üìñ –ù–∞–∑–≤–∞–Ω–∏–µ: {book_data['title']}\n"
            f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {book_data['author']}\n"
            f"üè∑ –ñ–∞–Ω—Ä: {book_data.get('genre', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìÖ –ì–æ–¥: {book_data.get('year', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {status}\n\n"
            f"{Config.EMOJI['confirm']} –í—Å–µ –≤–µ—Ä–Ω–æ?"
        )

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(f"{Config.EMOJI['confirm']} –î–∞", callback_data="confirm_book_yes"),
                InlineKeyboardButton(f"{Config.EMOJI['cancel']} –ù–µ—Ç", callback_data="confirm_book_no")
            ],
            self.back_button()
        ])

        await query.edit_message_text(confirmation_msg, reply_markup=keyboard)
        return States.CONFIRM_BOOK_DATA

    async def confirm_book_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        if query.data == "confirm_book_no":
            await query.edit_message_text(
                "–ù–∞—á–Ω–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ:",
                reply_markup=InlineKeyboardMarkup([self.back_button()])
            )
            return States.ADD_BOOK_START
        else:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–Ω–∏–≥–∏ –≤ –ë–î
            # await self.save_book_to_db(query.from_user.id, self.user_data[query.from_user.id])
            await query.edit_message_text(
                f"{Config.EMOJI['success']} –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                reply_markup=self.get_main_menu_keyboard()
            )
            return ConversationHandler.END

    # –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥–∏
    async def search_book_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üîç –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="search_title"),
                InlineKeyboardButton("‚úçÔ∏è –ü–æ –∞–≤—Ç–æ—Ä—É", callback_data="search_author")
            ],
            [
                InlineKeyboardButton("üè∑ –ü–æ –∂–∞–Ω—Ä—É", callback_data="search_genre"),
                InlineKeyboardButton("üìÖ –ü–æ –≥–æ–¥—É", callback_data="search_year")
            ],
            self.back_button()
        ])

        await update.callback_query.edit_message_text(
            f"{Config.EMOJI['search']} –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞:",
            reply_markup=keyboard
        )
        return States.SEARCH_METHOD

    async def search_by_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.callback_query.edit_message_text(
            f"{Config.EMOJI['books']} –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:",
            reply_markup=InlineKeyboardMarkup([self.back_button()])
        )
        return States.SEARCH_BY_TITLE

    async def search_by_author(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.callback_query.edit_message_text(
            f"{Config.EMOJI['author']} –í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞:",
            reply_markup=InlineKeyboardMarkup([self.back_button()])
        )
        return States.SEARCH_BY_AUTHOR

    async def search_by_genre(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤
        # genres = await self.get_available_genres()
        genres = ["–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–î–µ—Ç–µ–∫—Ç–∏–≤", "–†–æ–º–∞–Ω", "–ù–∞—É—á–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞"]  # –ü—Ä–∏–º–µ—Ä

        buttons = [InlineKeyboardButton(genre, callback_data=f"genre_{genre}") for genre in genres]
        keyboard = InlineKeyboardMarkup(self._chunk_buttons(buttons, 2) + [self.back_button()])

        await update.callback_query.edit_message_text(
            f"{Config.EMOJI['genre']} –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:",
            reply_markup=keyboard
        )
        return States.SEARCH_BY_GENRE

    async def search_by_year(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.callback_query.edit_message_text(
            f"{Config.EMOJI['year']} –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –∏–∑–¥–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup([self.back_button()])
        )
        return States.SEARCH_BY_YEAR

    async def show_search_results(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        search_query = update.message.text if update.message else update.callback_query.data.replace("genre_", "")
        search_method = context.user_data.get('search_method')

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î/API –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥
        # books, total_count = await self.search_books_in_db(
        #     method=search_method,
        #     query=search_query,
        #     page=context.user_data.get('page', 0),
        #     limit=10
        # )
        books = []  # –≠—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ë–î/API
        total_count = 0  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥

        if not books:
            await update.message.reply_text(
                "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.",
                reply_markup=InlineKeyboardMarkup([self.back_button()])
            )
            return States.SEARCH_METHOD

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        current_page = context.user_data.get('page', 0)
        context.user_data['search_results'] = books

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        message = f"{Config.EMOJI['books']} –ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: {total_count}\n\n"
        for i, book in enumerate(books, 1):
            message += f"{i}. {book.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - {book.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')} ({book.get('year', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')})\n"

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–∏—Å–ª–∞–º–∏
            keyboard_buttons = []
            if total_count > 10 and (current_page + 1) * 10 < total_count:
                keyboard_buttons.append(InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="next_page"))

            keyboard_buttons.append(self.back_button()[0])
            keyboard = InlineKeyboardMarkup([keyboard_buttons])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫–∏ (–∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ)
            # for book in books:
            #     if book.get('cover_url'):
            #         await update.message.reply_photo(book['cover_url'])

            await update.message.reply_text(
                message,
                reply_markup=keyboard
            )
            return States.SEARCH_RESULTS

        async def handle_next_page(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
            context.user_data['page'] = context.user_data.get('page', 0) + 1
            return await self.show_search_results(update, context)

        def _chunk_buttons(self, buttons, chunk_size):
            """–†–∞–∑–±–∏–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ä—è–¥—ã –ø–æ chunk_size –∫–Ω–æ–ø–æ–∫ –≤ –∫–∞–∂–¥–æ–º"""
            return [buttons[i:i + chunk_size] for i in range(0, len(buttons), chunk_size)]

    # –ú–æ–∏ –∫–Ω–∏–≥–∏
    # –ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã —Å "–ú–æ–∏ –∫–Ω–∏–≥–∏"
    async def show_my_books(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–∏–≥ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        # status_counts = await self.get_books_count_by_status(user_id=update.effective_user.id)
        status_counts = {
            'reading': 5,  # –ß–∏—Ç–∞—é —Å–µ–π—á–∞—Å
            'finished': 12,  # –ü—Ä–æ—á–∏—Ç–∞–Ω–æ
            'paused': 3,  # –û—Ç–ª–æ–∂–µ–Ω–æ
            'dropped': 2  # –ó–∞–±—Ä–æ—à–µ–Ω–æ
        }

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(f"üìñ –ß–∏—Ç–∞—é —Å–µ–π—á–∞—Å ({status_counts['reading']})",
                                     callback_data="status_reading"),
                InlineKeyboardButton(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ ({status_counts['finished']})",
                                     callback_data="status_finished")
            ],
            [
                InlineKeyboardButton(f"üí§ –û—Ç–ª–æ–∂–µ–Ω–æ ({status_counts['paused']})",
                                     callback_data="status_paused"),
                InlineKeyboardButton(f"‚ùå –ó–∞–±—Ä–æ—à–µ–Ω–æ ({status_counts['dropped']})",
                                     callback_data="status_dropped")
            ],
            self.back_button()
        ])

        await update.callback_query.edit_message_text(
            "üìö –ú–æ–∏ –∫–Ω–∏–≥–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:",
            reply_markup=keyboard
        )
        return States.MY_BOOKS_MENU

    async def show_books_by_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        status = query.data.replace("status_", "")
        context.user_data['current_status'] = status
        context.user_data['page'] = 0

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        # books, total_count = await self.get_books_by_status(
        #     user_id=query.from_user.id,
        #     status=status,
        #     page=0,
        #     limit=10
        # )
        books = []  # –≠—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ë–î
        total_count = len(books)  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

        if not books:
            await query.edit_message_text(
                f"–£ –≤–∞—Å –Ω–µ—Ç –∫–Ω–∏–≥ —Å —Å—Ç–∞—Ç—É—Å–æ–º '{self._get_status_name(status)}'.",
                reply_markup=InlineKeyboardMarkup([self.back_button()])
            )
            return States.MY_BOOKS_MENU

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_name = self._get_status_name(status)
        message = f"üìö –ö–Ω–∏–≥–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status_name}' ({total_count}):\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
        for i, book in enumerate(books, 1):
            message += f"{i}. {book.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - {book.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard_buttons = []
        if total_count > 10:
            keyboard_buttons.append(InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="next_page"))

        keyboard_buttons.append(self.back_button()[0])
        keyboard = InlineKeyboardMarkup([keyboard_buttons])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫–∏ (–∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ)
        # for book in books:
        #     if book.get('cover_url'):
        #         await query.message.reply_photo(book['cover_url'])

        await query.edit_message_text(
            message,
            reply_markup=keyboard
        )
        return States.BOOKS_BY_STATUS

    async def show_book_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        book_index = int(update.callback_query.data.replace("book_", ""))
        books = context.user_data.get('current_books', [])

        if not books or book_index >= len(books):
            await update.callback_query.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return States.BOOKS_BY_STATUS

        book = books[book_index]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        details = (
            f"üìñ {book.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
            f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {book.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
            f"üè∑ –ñ–∞–Ω—Ä: {book.get('genre', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìÖ –ì–æ–¥: {book.get('year', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {book.get('rating', '–Ω–µ –æ—Ü–µ–Ω–µ–Ω–∞')}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {self._get_status_name(book.get('status'))}\n"
            f"üìù –ó–∞–º–µ—Ç–æ–∫: {book.get('notes_count', 0)}\n"
            f"üí¨ –¶–∏—Ç–∞—Ç: {book.get('quotes_count', 0)}"
        )

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"edit_status_{book['id']}"),
                InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data=f"add_note_{book['id']}"),
                InlineKeyboardButton("üí¨ –î–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É", callback_data=f"add_quote_{book['id']}")
            ],
            self.back_button()
        ])

        await update.callback_query.edit_message_text(
            details,
            reply_markup=keyboard
        )
        return States.BOOK_DETAILS

    async def handle_next_page(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['page'] += 1
        return await self.show_books_by_status(update, context)

    def _get_status_name(self, status):
        status_names = {
            'reading': '–ß–∏—Ç–∞—é —Å–µ–π—á–∞—Å',
            'finished': '–ü—Ä–æ—á–∏—Ç–∞–Ω–æ',
            'paused': '–û—Ç–ª–æ–∂–µ–Ω–æ',
            'dropped': '–ó–∞–±—Ä–æ—à–µ–Ω–æ',
            'planned': '–ü–ª–∞–Ω–∏—Ä—É—é'
        }
        return status_names.get(status, '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')

    async def edit_book_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–Ω–∏–≥–∏"""
        query = update.callback_query
        book_id = query.data.replace("edit_status_", "")
        context.user_data['current_book_id'] = book_id

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìñ –ß–∏—Ç–∞—é —Å–µ–π—á–∞—Å", callback_data="status_reading"),
                InlineKeyboardButton("‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ", callback_data="status_finished")
            ],
            [
                InlineKeyboardButton("üí§ –û—Ç–ª–æ–∂–µ–Ω–æ", callback_data="status_paused"),
                InlineKeyboardButton("üìÖ –ü–ª–∞–Ω–∏—Ä—É—é", callback_data="status_planned")
            ],
            self.back_button()
        ])

        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∫–Ω–∏–≥–∏:",
            reply_markup=keyboard
        )
        return States.EDIT_BOOK

    # –†–∞–∑–¥–µ–ª –∑–∞–º–µ—Ç–æ–∫
    async def notes_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.callback_query:
            await update.callback_query.answer()
            reply_method = update.callback_query.edit_message_text
        else:
            reply_method = update.message.reply_text

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # books = await self.get_user_books(update.effective_user.id)
        books = []  # –≠—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ë–î

        if not books:
            await update.message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥.",
                reply_markup=self.main_menu_keyboard()
            )
            return ConversationHandler.END

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–Ω–∏–≥ (–ø–µ—Ä–≤—ã–µ 10)
        message = "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è –∑–∞–º–µ—Ç–∫–∏:\n\n"
        for i, book in enumerate(books[:10], 1):
            message += f"{i}. {book.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - {book.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard_buttons = []

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥–∏
        for i, book in enumerate(books[:10], 1):
            keyboard_buttons.append(InlineKeyboardButton(
                f"{i}. {book.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}",
                callback_data=f"book_{book['id']}"
            ))

        # –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –µ—Å–ª–∏ –∫–Ω–∏–≥ –±–æ–ª—å—à–µ 10
        if len(books) > 10:
            keyboard_buttons.append(InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="next_page"))

        keyboard_buttons.append(self.back_button()[0])
        keyboard = InlineKeyboardMarkup(self._chunk_buttons(keyboard_buttons, 2))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫–∏ (–∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ)
        # for book in books[:10]:
        #     if book.get('cover_url'):
        #         await update.message.reply_photo(book['cover_url'])

        await update.message.reply_text(
            message,
            reply_markup=keyboard
        )
        return States.SELECT_BOOK_FOR_NOTE

    async def select_book_for_note(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        book_id = query.data.replace("book_", "")

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–º–µ—Ç–∫–∏
        # existing_note = await self.get_book_note(update.effective_user.id, book_id)
        existing_note = None  # –≠—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î

        if existing_note:
            context.user_data['existing_note'] = existing_note
            context.user_data['book_id'] = book_id

            confirmation_msg = (
                f"üìù –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–º–µ—Ç–∫–∞ –¥–ª—è —ç—Ç–æ–π –∫–Ω–∏–≥–∏:\n\n"
                f"‚úçÔ∏è –û—Ç–∑—ã–≤: {existing_note.get('text', '–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞')}\n"
                f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {existing_note.get('rating', '–Ω–µ –æ—Ü–µ–Ω–µ–Ω–∞')}/10\n\n"
                f"–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É?"
            )

            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton(f"{Config.EMOJI['confirm']} –î–∞", callback_data="edit_note_yes"),
                    InlineKeyboardButton(f"{Config.EMOJI['cancel']} –ù–µ—Ç", callback_data="edit_note_no")
                ],
                self.back_button()
            ])

            await query.edit_message_text(
                confirmation_msg,
                reply_markup=keyboard
            )
            return States.EDIT_EXISTING_NOTE
        else:
            context.user_data['book_id'] = book_id
            await query.edit_message_text(
                f"{Config.EMOJI['notes']} –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –∏–ª–∏ –∑–∞–º–µ—Ç–∫–∏ –ø–æ —ç—Ç–æ–π –∫–Ω–∏–≥–µ:",
                reply_markup=InlineKeyboardMarkup([self.back_button()])
            )
            return States.ADD_NOTE_TEXT

    async def add_note_to_book(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –∫ –∫–Ω–∏–≥–µ"""
        book_id = update.callback_query.data.replace("add_note_", "")
        context.user_data['current_book_id'] = book_id
        await update.callback_query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:",
            reply_markup=InlineKeyboardMarkup([self.back_button()])
        )
        return States.ADD_NOTE_TEXT

    async def handle_edit_note_decision(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        if query.data == "edit_note_yes":
            await query.edit_message_text(
                f"{Config.EMOJI['notes']} –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤:",
                reply_markup=InlineKeyboardMarkup([self.back_button()])
            )
            return States.ADD_NOTE_TEXT
        else:
            await query.edit_message_text(
                "–ó–∞–º–µ—Ç–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
                reply_markup=self.main_menu_keyboard()
            )
            return ConversationHandler.END

    async def add_note_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self.user_data[update.message.from_user.id]['note'] = update.message.text

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
        rating_buttons = [InlineKeyboardButton(str(i), callback_data=f"rating_{i}") for i in range(1, 11)]
        keyboard = InlineKeyboardMarkup(
            self._chunk_buttons(rating_buttons, 5) +
            [self.back_button()]
        )

        await update.message.reply_text(
            f"{Config.EMOJI['rating']} –ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –∫–Ω–∏–≥–µ (–ø–æ 10-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ):",
            reply_markup=keyboard
        )
        return States.ADD_NOTE_RATING

    async def add_note_rating(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        rating = query.data.replace("rating_", "")
        self.user_data[query.from_user.id]['rating'] = rating

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ
        # book = await self.get_book_info(context.user_data['book_id'])
        book = {'title': '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏', 'author': '–ê–≤—Ç–æ—Ä'}  # –ó–∞–≥–ª—É—à–∫–∞

        note_data = self.user_data[query.from_user.id]
        confirmation_msg = (
            f"{Config.EMOJI['notes']} –í–∞—à–∞ –∑–∞–º–µ—Ç–∫–∞:\n\n"
            f"üìñ –ö–Ω–∏–≥–∞: {book.get('title', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')} - {book.get('author', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"‚úçÔ∏è –û—Ç–∑—ã–≤: {note_data['note']}\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {note_data['rating']}/10\n\n"
            f"{Config.EMOJI['confirm']} –í—Å–µ –≤–µ—Ä–Ω–æ?"
        )

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(f"{Config.EMOJI['confirm']} –î–∞", callback_data="confirm_note_yes"),
                InlineKeyboardButton(f"{Config.EMOJI['cancel']} –ù–µ—Ç", callback_data="confirm_note_no")
            ],
            self.back_button()
        ])

        await query.edit_message_text(
            confirmation_msg,
            reply_markup=keyboard
        )
        return States.CONFIRM_NOTE

    async def confirm_note(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        if query.data == "confirm_note_yes":
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
            # await self.save_note(
            #     user_id=update.effective_user.id,
            #     book_id=context.user_data['book_id'],
            #     text=context.user_data[update.effective_user.id]['note'],
            #     rating=context.user_data[update.effective_user.id]['rating']
            # )
            await query.edit_message_text(
                f"{Config.EMOJI['success']} –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
                reply_markup=self.main_menu_keyboard()
            )
        else:
            await query.edit_message_text(
                "–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑:",
                reply_markup=InlineKeyboardMarkup([self.back_button()])
            )
            return States.ADD_NOTE_TEXT

        return ConversationHandler.END

    async def handle_next_page_notes(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['page'] = context.user_data.get('page', 0) + 1
        return await self.notes_menu(update, context)

    # –†–∞–∑–¥–µ–ª —Ü–∏—Ç–∞—Ç
    async def quotes_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # books = await self.get_user_books(update.effective_user.id)
        books = []  # –≠—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ë–î

        if not books:
            await update.message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥.",
                reply_markup=self.main_menu_keyboard()
            )
            return ConversationHandler.END

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–Ω–∏–≥ (–ø–µ—Ä–≤—ã–µ 10)
        message = "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–∏—Ç–∞—Ç–∞–º–∏:\n\n"
        for i, book in enumerate(books[:10], 1):
            message += f"{i}. {book.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - {book.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard_buttons = []

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥–∏
        for i, book in enumerate(books[:10], 1):
            keyboard_buttons.append(InlineKeyboardButton(
                f"{i}. {book.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}",
                callback_data=f"quote_book_{book['id']}"
            ))

        # –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –µ—Å–ª–∏ –∫–Ω–∏–≥ –±–æ–ª—å—à–µ 10
        if len(books) > 10:
            keyboard_buttons.append(InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="next_quote_page"))

        keyboard_buttons.append(self.back_button()[0])
        keyboard = InlineKeyboardMarkup(self._chunk_buttons(keyboard_buttons, 2))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫–∏ (–∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ)
        # for book in books[:10]:
        #     if book.get('cover_url'):
        #         await update.message.reply_photo(book['cover_url'])

        await update.message.reply_text(
            message,
            reply_markup=keyboard
        )
        return States.SELECT_BOOK_FOR_QUOTE

    async def select_book_for_quote(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        book_id = query.data.replace("quote_book_", "")
        context.user_data['current_book_id'] = book_id

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ
        # book = await self.get_book_info(book_id)
        book = {'title': '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏', 'author': '–ê–≤—Ç–æ—Ä'}  # –ó–∞–≥–ª—É—à–∫–∞

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(f"{Config.EMOJI['add']} –î–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É", callback_data="add_quote"),
                InlineKeyboardButton(f"{Config.EMOJI['quotes']} –°–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç", callback_data="list_quotes")
            ],
            self.back_button()
        ])

        await query.edit_message_text(
            f"üìñ –í—ã–±—Ä–∞–Ω–∞ –∫–Ω–∏–≥–∞: {book.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
            f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {book.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        return States.QUOTES_MENU

    async def add_quote_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.callback_query.edit_message_text(
            f"{Config.EMOJI['quote']} –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ç–∞—Ç—É:",
            reply_markup=InlineKeyboardMarkup([self.back_button()])
        )
        return States.ADD_QUOTE_TEXT

    async def add_quote_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.message.text.lower() == '–Ω–∞–∑–∞–¥':
            return await self.back_to_previous_state(update, context)

        self.user_data[update.message.from_user.id]['quote'] = update.message.text
        await update.message.reply_text(
            f"{Config.EMOJI['quote']} –£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ü–∏—Ç–∞—Ç—ã (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
            reply_markup=InlineKeyboardMarkup([self.back_button()])
        )
        return States.ADD_QUOTE_PAGE

    async def add_quote_page(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.message.text.isdigit():
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:",
                reply_markup=InlineKeyboardMarkup([self.back_button()])
            )
            return States.ADD_QUOTE_PAGE

        self.user_data[update.message.from_user.id]['page'] = update.message.text

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ
        # book = await self.get_book_info(context.user_data['current_book_id'])
        book = {'title': '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏', 'author': '–ê–≤—Ç–æ—Ä'}  # –ø–æ–∫–∞ —á—Ç–æ

        quote_data = self.user_data[update.message.from_user.id]
        confirmation_msg = (
            f"{Config.EMOJI['quote']} –í–∞—à–∞ —Ü–∏—Ç–∞—Ç–∞:\n\n"
            f"üìñ –ö–Ω–∏–≥–∞: {book.get('title', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"üí¨ –¶–∏—Ç–∞—Ç–∞: {quote_data['quote']}\n"
            f"üìå –°—Ç—Ä–∞–Ω–∏—Ü–∞: {quote_data['page']}\n\n"
            f"{Config.EMOJI['confirm']} –í—Å–µ –≤–µ—Ä–Ω–æ?"
        )

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(f"{Config.EMOJI['confirm']} –î–∞", callback_data="confirm_quote_yes"),
                InlineKeyboardButton(f"{Config.EMOJI['cancel']} –ù–µ—Ç", callback_data="confirm_quote_no")
            ],
            self.back_button()
        ])

        await update.message.reply_text(confirmation_msg, reply_markup=keyboard)
        return States.CONFIRM_QUOTE

    async def list_quotes_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç –ø–æ –∫–Ω–∏–≥–µ
        # quotes = await self.get_book_quotes(context.user_data['current_book_id'])
        quotes = []  # –≠—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ë–î

        if not quotes:
            await update.callback_query.edit_message_text(
                "–î–ª—è —ç—Ç–æ–π –∫–Ω–∏–≥–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ü–∏—Ç–∞—Ç.",
                reply_markup=InlineKeyboardMarkup([self.back_button()])
            )
            return States.QUOTES_MENU

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ü–∏—Ç–∞—Ç (–ø–µ—Ä–≤—ã–µ 10)
        message = "üìö –¶–∏—Ç–∞—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–µ:\n\n"
        for i, quote in enumerate(quotes[:10], 1):
            message += f"{i}. {quote.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')} (—Å—Ç—Ä. {quote.get('page', '?')})\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard_buttons = []

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–∏—Ç–∞—Ç—ã
        for i, quote in enumerate(quotes[:10], 1):
            keyboard_buttons.append(InlineKeyboardButton(
                f"{i}. –¶–∏—Ç–∞—Ç–∞",
                callback_data=f"quote_{quote['id']}"
            ))

        # –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –µ—Å–ª–∏ —Ü–∏—Ç–∞—Ç –±–æ–ª—å—à–µ 10
        if len(quotes) > 10:
            keyboard_buttons.append(InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="next_quote_list_page"))

        keyboard_buttons.append(self.back_button()[0])
        keyboard = InlineKeyboardMarkup(self._chunk_buttons(keyboard_buttons, 2))

        await update.callback_query.edit_message_text(
            message,
            reply_markup=keyboard
        )
        return States.LIST_QUOTES

    async def show_quote_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        quote_id = update.callback_query.data.replace("quote_", "")
        context.user_data['current_quote_id'] = quote_id

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–∏—Ç–∞—Ç–µ
        # quote = await self.get_quote_info(quote_id)
        quote = {'text': '–¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã', 'page': '123'}  # –ø–æ–∫–∞ —á—Ç–æ

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–∏—Ç–∞—Ç—É", callback_data="edit_quote"),
                InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ü–∏—Ç–∞—Ç—É", callback_data="delete_quote")
            ],
            self.back_button()
        ])

        await update.callback_query.edit_message_text(
            f"üí¨ –¶–∏—Ç–∞—Ç–∞:\n\n{quote.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')}\n\n"
            f"üìå –°—Ç—Ä–∞–Ω–∏—Ü–∞: {quote.get('page', '?')}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        return States.QUOTE_DETAILS

    async def edit_quote_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.callback_query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã:",
            reply_markup=InlineKeyboardMarkup([self.back_button()])
        )
        return States.EDIT_QUOTE

    async def delete_quote_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(f"{Config.EMOJI['confirm']} –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete_yes"),
                InlineKeyboardButton(f"{Config.EMOJI['cancel']} –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", callback_data="confirm_delete_no")
            ],
            self.back_button()
        ])

        await update.callback_query.edit_message_text(
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ü–∏—Ç–∞—Ç—É?",
            reply_markup=keyboard
        )
        return States.DELETE_QUOTE

    async def add_quote_to_book(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        if query.data == "confirm_quote_yes":
            user_id = update.effective_user.id
            book_id = context.user_data['current_book_id']
            quote_data = self.user_data[user_id]

            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã
            # –ù–∞–ø—Ä–∏–º–µ—Ä:
            # quote_id = await self.db.add_quote(
            #     user_id=user_id,
            #     book_id=book_id,
            #     text=quote_data['quote'],
            #     page=quote_data['page']
            # )

            await query.edit_message_text(
                f"{Config.EMOJI['success']} –¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
                reply_markup=InlineKeyboardMarkup([self.back_button()])
            )

            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if user_id in self.user_data:
                del self.user_data[user_id]['quote']
                del self.user_data[user_id]['page']

            return await self.select_book_for_quote(update, context)
        else:
            return await self.add_quote_start(update, context)

    async def confirm_quote(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        if query.data == "confirm_quote_yes":
            user_data = context.user_data
            # –õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã
            await query.edit_message_text("‚úÖ –¶–∏—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            return await self.select_book_for_quote(update, context)
        else:
            return await self.add_quote_start(update, context)

    async def handle_next_quote_page(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['quote_page'] = context.user_data.get('quote_page', 0) + 1
        return await self.quotes_menu(update, context)

    async def handle_next_quote_list_page(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['quote_list_page'] = context.user_data.get('quote_list_page', 0) + 1
        return await self.list_quotes_start(update, context)

    # –†–∞–∑–¥–µ–ª —Ü–µ–ª–µ–π
    async def goals_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # goals = await self.get_user_goals(update.effective_user.id)
        goals = None  # –≠—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î

        if goals:
            # –ï—Å–ª–∏ —Ü–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–∑–º–µ–Ω–∏—Ç—å
            confirmation_msg = (
                f"{Config.EMOJI['goals']} –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏:\n\n"
                f"üìÖ –ö–Ω–∏–≥ –∑–∞ –≥–æ–¥: {goals.get('yearly_goal', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üìÖ –ö–Ω–∏–≥ –∑–∞ –º–µ—Å—è—Ü: {goals.get('monthly_goal', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üìÖ –ö–Ω–∏–≥ –∑–∞ –Ω–µ–¥–µ–ª—é: {goals.get('weekly_goal', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"‚è± –ú–∏–Ω—É—Ç –≤ –¥–µ–Ω—å: {goals.get('daily_minutes', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {goals.get('reminder_time', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n\n"
                "–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª–∏?"
            )

            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton(f"{Config.EMOJI['confirm']} –î–∞", callback_data="edit_goals_yes"),
                    InlineKeyboardButton(f"{Config.EMOJI['cancel']} –ù–µ—Ç", callback_data="edit_goals_no")
                ]
                # self.back_button()
            ])

            await update.message.reply_text(
                confirmation_msg,
                reply_markup=keyboard
            )
            return States.EDIT_GOALS
        else:
            # –ï—Å–ª–∏ —Ü–µ–ª–µ–π –Ω–µ—Ç, —Å–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Ö —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
            keyboard = [
                [InlineKeyboardButton(f"{Config.EMOJI['confirm']} –î–∞", callback_data="setup_goals_yes"),
                 InlineKeyboardButton(f"{Config.EMOJI['cancel']} –ù–µ—Ç", callback_data="setup_goals_no")]
            ]
            await update.message.reply_text(
                f"{Config.EMOJI['goals']} –•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è?",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return States.SETUP_GOALS_QUESTION

    async def handle_setup_goals_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        if query.data == "setup_goals_yes":
            await query.edit_message_text(
                f"{Config.EMOJI['goals']} –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –∑–∞ –≥–æ–¥: (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å /skip)"
            )
            return States.SET_YEARLY_GOAL
        else:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑, —ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π!",
                reply_markup=self.main_menu_keyboard()
            )
            return ConversationHandler.END

    async def set_yearly_goal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.message.text != '/skip':
            if not update.message.text.isdigit():
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return States.SET_YEARLY_GOAL

            self.user_data[update.message.from_user.id]['yearly_goal'] = update.message.text

        await update.message.reply_text(
            f"{Config.EMOJI['goals']} –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –∑–∞ –º–µ—Å—è—Ü: (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å /skip)"
        )
        return States.SET_MONTHLY_GOAL

    async def set_monthly_goal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.message.text != '/skip':
            if not update.message.text.isdigit():
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return States.SET_MONTHLY_GOAL

            self.user_data[update.message.from_user.id]['monthly_goal'] = update.message.text

        await update.message.reply_text(
            f"{Config.EMOJI['goals']} –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –∑–∞ –Ω–µ–¥–µ–ª—é: (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å /skip)"
        )
        return States.SET_WEEKLY_GOAL

    async def set_weekly_goal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.message.text != '/skip':
            if not update.message.text.isdigit():
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return States.SET_WEEKLY_GOAL

            self.user_data[update.message.from_user.id]['weekly_goal'] = update.message.text

        await update.message.reply_text(
            f"{Config.EMOJI['goals']} –°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–µ–ª–∏—Ç—å –Ω–∞ —á—Ç–µ–Ω–∏–µ? (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å /skip)"
        )
        return States.SET_DAILY_MINUTES

    async def set_daily_minutes(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.message.text != '/skip':
            if not update.message.text.isdigit():
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return States.SET_DAILY_MINUTES

            self.user_data[update.message.from_user.id]['daily_minutes'] = update.message.text

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(f"{Config.EMOJI['confirm']} –î–∞", callback_data="set_reminder_yes"),
                InlineKeyboardButton(f"{Config.EMOJI['cancel']} –ù–µ—Ç", callback_data="set_reminder_no")
            ]
        ])

        await update.message.reply_text(
            f"{Config.EMOJI['reminders']} –•–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?",
            reply_markup=keyboard
        )
        return States.SET_REMINDER

    async def set_reminder(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        if query.data == "set_reminder_yes":
            await query.edit_message_text(
                f"{Config.EMOJI['reminders']} –í–≤–µ–¥–∏—Ç–µ –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20:00):"
            )
            return States.SET_REMINDER_TIME
        else:
            return await self.confirm_goals(query)

    async def set_reminder_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        self.user_data[update.message.from_user.id]['reminder_time'] = update.message.text
        return await self.confirm_goals(update)

    async def confirm_goals(self, update: Update):
        confirmation_msg = (
            f"{Config.EMOJI['goals']} –í–∞—à–∏ —Ü–µ–ª–∏:\n\n"
            f"üìÖ –ö–Ω–∏–≥ –∑–∞ –≥–æ–¥: {goals_data.get('yearly_goal', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìÖ –ö–Ω–∏–≥ –∑–∞ –º–µ—Å—è—Ü: {goals_data.get('monthly_goal', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìÖ –ö–Ω–∏–≥ –∑–∞ –Ω–µ–¥–µ–ª—é: {goals_data.get('weekly_goal', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚è± –ú–∏–Ω—É—Ç –≤ –¥–µ–Ω—å: {goals_data.get('daily_minutes', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {goals_data.get('reminder_time', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n\n"
            f"{Config.EMOJI['confirm']} –í—Å–µ –≤–µ—Ä–Ω–æ?"
        )

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(f"{Config.EMOJI['confirm']} –î–∞", callback_data="confirm_goals_yes"),
                InlineKeyboardButton(f"{Config.EMOJI['cancel']} –ù–µ—Ç", callback_data="confirm_goals_no")
            ]
        ])

        if hasattr(update, 'edit_message_text'):
            await update.edit_message_text(confirmation_msg, reply_markup=keyboard)
        else:
            await update.message.reply_text(confirmation_msg, reply_markup=keyboard)

        return States.CONFIRM_GOALS

    async def handle_edit_goals(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        if query.data == "edit_goals_yes":
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ü–µ–ª–∏ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ –∑–∞–Ω–æ–≤–æ
            self.user_data[query.from_user.id] = {}
            await query.edit_message_text(
                f"{Config.EMOJI['goals']} –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –∑–∞ –≥–æ–¥: (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å /skip)"
            )
            return States.SET_YEARLY_GOAL
        else:
            await query.edit_message_text(
                "–¶–µ–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."
            )
            return ConversationHandler.END

    # –†–∞–∑–¥–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.callback_query:
            await update.callback_query.answer()
            reply_method = update.callback_query.edit_message_text
        else:
            reply_method = update.message.reply_text

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        # stats = await self.get_user_stats(update.effective_user.id)
        stats = {  # —ç—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            'yearly_books': 15,
            'genres': [
                {'name': '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', 'percent': 40},
                {'name': '–ö–ª–∞—Å—Å–∏–∫–∞', 'percent': 25},
                {'name': '–ù–∞—É—á–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', 'percent': 20},
                {'name': '–î–µ—Ç–µ–∫—Ç–∏–≤—ã', 'percent': 15}
            ],
            'avg_rating': 7.2,
            'weekly_report': {
                'books_read': 3,
                'books_added': 2,
                'quotes_added': 5,
                'productivity_change': 15
            }
        }

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_msg = (
            f"{Config.EMOJI['stats']} <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"1. üìÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –∑–∞ –≥–æ–¥: {stats['yearly_books']} –∫–Ω–∏–≥\n\n"
            f"2. üè∑ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∂–∞–Ω—Ä—ã:\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∂–∞–Ω—Ä—ã
        for genre in stats['genres']:
            stats_msg += f"   - {genre['name']} ({genre['percent']}%)\n"

        stats_msg += (
            f"\n3. ‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {stats['avg_rating']:.1f}/10\n\n"
            f"{Config.EMOJI['report']} <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:</b>\n"
            f"   - –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: {stats['weekly_report']['books_read']} –∫–Ω–∏–≥\n"
            f"   - –î–æ–±–∞–≤–ª–µ–Ω–æ: {stats['weekly_report']['books_added']} –Ω–æ–≤—ã—Ö –∫–Ω–∏–≥\n"
            f"   - –ù–æ–≤—ã—Ö —Ü–∏—Ç–∞—Ç: {stats['weekly_report']['quotes_added']}\n"
            f"   - –ù–∞ {stats['weekly_report']['productivity_change']}% –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏!"
        )

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(f"{Config.EMOJI['report']} –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="full_report"),
                InlineKeyboardButton(f"{Config.EMOJI['chart']} –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="show_charts")
            ],
            [
                InlineKeyboardButton(f"{Config.EMOJI['reminders']} –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—á–µ—Ç–æ–≤", callback_data="setup_reports")
            ],
            self.back_button()
        ])

        await update.message.reply_text(
            stats_msg,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        return States.STATS_MENU

    async def show_full_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        # full_report = await self.get_full_report(query.from_user.id)
        full_report = "–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –±—É–¥–µ—Ç –∑–¥–µ—Å—å..."  # –ó–∞–≥–ª—É—à–∫–∞

        await query.edit_message_text(
            f"{Config.EMOJI['report']} <b>–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —á—Ç–µ–Ω–∏—é:</b>\n\n{full_report}",
            parse_mode='HTML'
        )
        return States.STATS_MENU

    async def show_charts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        # charts = await self.generate_charts(query.from_user.id)
        charts = []  # –ø–æ–∫–∞ —á—Ç–æ

        if charts:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞ - –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ)
            # for chart in charts:
            #     await query.message.reply_photo(chart)
            pass

        await query.edit_message_text(
            f"{Config.EMOJI['chart']} –í–∞—à–∏ –≥—Ä–∞—Ñ–∏–∫–∏ —á—Ç–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup([self.back_button()])
        )
        return States.STATS_MENU

    async def setup_reports(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç—á–µ—Ç–æ–≤
        # report_settings = await self.get_report_settings(query.from_user.id)
        report_settings = {'frequency': 'weekly', 'day': 'Monday', 'time': '20:00'}  # –ó–∞–≥–ª—É—à–∫–∞

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìÖ –ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤", callback_data="set_report_freq"),
                InlineKeyboardButton("üïí –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏", callback_data="set_report_time")
            ],
            self.back_button()
        ])

        await query.edit_message_text(
            f"{Config.EMOJI['reminders']} <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—á–µ—Ç–æ–≤:</b>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"- –ß–∞—Å—Ç–æ—Ç–∞: {report_settings['frequency']}\n"
            f"- –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {report_settings['day']}\n"
            f"- –í—Ä–µ–º—è: {report_settings['time']}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        return States.REPORT_SETTINGS

    async def set_report_frequency(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data="freq_weekly"),
                InlineKeyboardButton("–ï–∂–µ–º–µ—Å—è—á–Ω–æ", callback_data="freq_monthly")
            ],
            [
                InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data="freq_daily"),
                InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="freq_off")
            ],
            self.back_button()
        ])

        await query.edit_message_text(
            f"{Config.EMOJI['reminders']} –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤:",
            reply_markup=keyboard
        )
        return States.SET_REPORT_FREQ

    async def set_report_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        await query.edit_message_text(
            f"{Config.EMOJI['reminders']} –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20:00):",
            reply_markup=InlineKeyboardMarkup([self.back_button()])
        )
        return States.SET_REPORT_TIME

    async def handle_report_frequency(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –æ—Ç—á–µ—Ç–æ–≤"""
        query = update.callback_query
        await query.answer()

        freq_map = {
            'freq_weekly': '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ',
            'freq_monthly': '–µ–∂–µ–º–µ—Å—è—á–Ω–æ',
            'freq_daily': '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ',
            'freq_off': '–æ—Ç–∫–ª—é—á–µ–Ω—ã'
        }

        frequency = freq_map.get(query.data, '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ')
        context.user_data['report_frequency'] = frequency

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        # await self.db.save_report_frequency(update.effective_user.id, frequency)

        await query.edit_message_text(
            f"‚úÖ –ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {frequency}",
            reply_markup=self.main_menu_keyboard()
        )
        return ConversationHandler.END

    async def handle_report_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—á–µ—Ç–æ–≤"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        if not re.match(r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$', update.message.text):
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20:00):",
                reply_markup=InlineKeyboardMarkup([self.back_button()])
            )
            return States.SET_REPORT_TIME

        time_str = update.message.text
        context.user_data['report_time'] = time_str

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        # await self.db.save_report_time(update.effective_user.id, time_str)

        await update.message.reply_text(
            f"‚úÖ –í—Ä–µ–º—è –æ—Ç—á–µ—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_str}",
            reply_markup=self.main_menu_keyboard()
        )
        return ConversationHandler.END

    # –†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏
    async def help_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_msg = (
            f"{Config.EMOJI['help']} –ß–∏—Ç–∞—Ç–µ–ª—å—Å–∫–∏–π –¥–Ω–µ–≤–Ω–∏–∫ - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –∫–Ω–∏–≥!\n\n"
            "üìö –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
            "- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π\n"
            "- –í–µ–¥–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –∏ —Ü–∏—Ç–∞—Ç\n"
            "- –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–π –ø–æ —á—Ç–µ–Ω–∏—é\n"
            "- –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π —á–∏—Ç–∞—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º."
        )
        await update.message.reply_text(help_msg)

    def books_menu_keyboard(self):
        return InlineKeyboardMarkup([
            [InlineKeyboardButton(f"{Config.EMOJI['add']} –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", callback_data="add_book")],
            [InlineKeyboardButton(f"{Config.EMOJI['search']} –ü–æ–∏—Å–∫", callback_data="search_book")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])

    def notes_menu_keyboard(self):
        return InlineKeyboardMarkup([
            [InlineKeyboardButton(f"{Config.EMOJI['add']} –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="add_note")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    async def cancel_operation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=self.main_menu_keyboard()
        )
        return ConversationHandler.END

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞
    async def back_to_book_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(f"{Config.EMOJI['add']} –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", callback_data="add_book")],
            [InlineKeyboardButton(f"{Config.EMOJI['search']} –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏", callback_data="search_book")],
            [InlineKeyboardButton(f"{Config.EMOJI['books']} –ú–æ–∏ –∫–Ω–∏–≥–∏", callback_data="my_books")],
        ])

        await query.edit_message_text(
            "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏:",
            reply_markup=keyboard
        )
        return States.BOOKS_MENU

    async def back_to_notes_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∑–∞–º–µ—Ç–æ–∫"""
        query = update.callback_query
        await query.answer()

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(f"{Config.EMOJI['add']} –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="add_note")],
            [InlineKeyboardButton(f"{Config.EMOJI['search']} –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏", callback_data="view_notes")],
        ])

        await query.edit_message_text(
            "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏:",
            reply_markup=keyboard
        )
        return States.NOTES_MENU

    async def back_to_quotes_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ü–∏—Ç–∞—Ç"""
        query = update.callback_query
        await query.answer()

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(f"{Config.EMOJI['add']} –î–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É", callback_data="add_quote")],
            [InlineKeyboardButton(f"{Config.EMOJI['search']} –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–∏—Ç–∞—Ç—ã", callback_data="view_quotes")],
        ])

        await query.edit_message_text(
            "üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç–∞–º–∏:",
            reply_markup=keyboard
        )
        return States.QUOTES_MENU

    async def back_to_stats_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        query = update.callback_query
        await query.answer()

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(f"{Config.EMOJI['report']} –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="full_report")],
            [InlineKeyboardButton(f"{Config.EMOJI['chart']} –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="show_charts")],
            [InlineKeyboardButton(f"{Config.EMOJI['reminders']} –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—á–µ—Ç–æ–≤", callback_data="setup_reports")],
        ])

        await query.edit_message_text(
            f"{Config.EMOJI['stats']} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã:",
            reply_markup=keyboard
        )
        return States.STATS_MENU

    async def back_to_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=self.main_menu_keyboard()
        )
        return ConversationHandler.END

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==================== #
def setup_conversation_handlers(bot_instance):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞"""

    # 1. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
    book_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(bot_instance.add_book_start, pattern="^add_book$")],
        states={
            States.ADD_BOOK_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot_instance.add_book_title)],
            States.ADD_BOOK_AUTHOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot_instance.add_book_author)],
            States.CONFIRM_API_DATA: [
                CallbackQueryHandler(bot_instance.confirm_api_data, pattern="^confirm_api_data_")],
            States.ADD_BOOK_GENRE: [CallbackQueryHandler(bot_instance.add_book_genre, pattern="^genre_")],
            States.ADD_BOOK_YEAR: [MessageHandler(filters.TEXT | filters.COMMAND, bot_instance.add_book_year)],
            States.ADD_BOOK_STATUS: [CallbackQueryHandler(bot_instance.add_book_status, pattern="^status_")],
            States.CONFIRM_BOOK_DATA: [CallbackQueryHandler(bot_instance.confirm_book_data, pattern="^confirm_book_")]
        },
        fallbacks=[
            CallbackQueryHandler(bot_instance.back_to_book_menu, pattern="^back$"),
            CommandHandler('cancel', bot_instance.cancel_operation)
        ],
        per_message=False
    )

    # 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ (–±–µ–∑ skip)
    search_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(bot_instance.search_book_start, pattern="^search_book$")],
        states={
            States.SEARCH_METHOD: [
                CallbackQueryHandler(bot_instance.search_by_title, pattern="^search_title$"),
                CallbackQueryHandler(bot_instance.search_by_author, pattern="^search_author$"),
                CallbackQueryHandler(bot_instance.search_by_genre, pattern="^search_genre$"),
                CallbackQueryHandler(bot_instance.search_by_year, pattern="^search_year$")
            ],
            States.SEARCH_BY_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot_instance.show_search_results)],
            States.SEARCH_BY_AUTHOR: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot_instance.show_search_results)],
            States.SEARCH_BY_GENRE: [CallbackQueryHandler(bot_instance.show_search_results, pattern="^genre_")],
            States.SEARCH_BY_YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot_instance.show_search_results)]
        },
        fallbacks=[
            CallbackQueryHandler(bot_instance.back_to_book_menu, pattern="^back$"),
            CommandHandler('cancel', bot_instance.cancel_operation)
        ],
        per_message=True
    )

    # 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–æ–∏—Ö –∫–Ω–∏–≥ (–±–µ–∑ skip)
    my_books_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(bot_instance.show_my_books, pattern="^my_books$")],
        states={
            States.MY_BOOKS_MENU: [
                CallbackQueryHandler(bot_instance.show_books_by_status, pattern="^status_"),
            ],
            States.BOOKS_BY_STATUS: [
                CallbackQueryHandler(bot_instance.show_book_details, pattern="^book_"),
                CallbackQueryHandler(bot_instance.handle_next_page, pattern="^next_page$"),
                CallbackQueryHandler(bot_instance.back_to_previous_state, pattern="^back$")
            ],
            States.BOOK_DETAILS: [
                CallbackQueryHandler(bot_instance.edit_book_status, pattern="^edit_status_"),
                CallbackQueryHandler(bot_instance.add_note_to_book, pattern="^add_note_"),
                CallbackQueryHandler(bot_instance.add_quote_to_book, pattern="^add_quote_"),
                CallbackQueryHandler(bot_instance.back_to_previous_state, pattern="^back$")
            ],
            States.EDIT_BOOK: [
                # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–Ω–∏–≥–∏
            ]
        },
        fallbacks=[
            CallbackQueryHandler(bot_instance.back_to_book_menu, pattern="^back$"),
            CommandHandler('cancel', bot_instance.cancel_operation)
        ],
        per_message=False
    )

    # 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–º–µ—Ç–æ–∫ (–±–µ–∑ skip)
    notes_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Text([f"{Config.EMOJI['notes']} –ó–∞–º–µ—Ç–∫–∏"]), bot_instance.notes_menu)],
        states={
            States.SELECT_BOOK_FOR_NOTE: [
                CallbackQueryHandler(bot_instance.select_book_for_note, pattern="^book_"),
                CallbackQueryHandler(bot_instance.handle_next_page_notes, pattern="^next_page$")
            ],
            States.ADD_NOTE_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot_instance.add_note_text)],
            States.ADD_NOTE_RATING: [CallbackQueryHandler(bot_instance.add_note_rating, pattern="^rating_")],
            States.CONFIRM_NOTE: [CallbackQueryHandler(bot_instance.confirm_note, pattern="^confirm_note_")]
        },
        fallbacks=[
            CallbackQueryHandler(bot_instance.back_to_notes_menu, pattern="^back$"),
            CommandHandler('cancel', bot_instance.cancel_operation)
        ],
        per_message=True
    )

    # 5. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–µ–ª–µ–π (—Å–æ skip)
    goals_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Text([f"{Config.EMOJI['goals']} –¶–µ–ª–∏"]), bot_instance.goals_menu)],
        states={
            States.SETUP_GOALS_QUESTION: [
                CallbackQueryHandler(bot_instance.handle_setup_goals_question, pattern="^setup_goals_")
            ],
            States.EDIT_GOALS: [
                CallbackQueryHandler(bot_instance.handle_edit_goals, pattern="^edit_goals_")
            ],
            States.SET_YEARLY_GOAL: [MessageHandler(filters.TEXT | filters.COMMAND, bot_instance.set_yearly_goal)],
            States.SET_MONTHLY_GOAL: [MessageHandler(filters.TEXT | filters.COMMAND, bot_instance.set_monthly_goal)],
            States.SET_WEEKLY_GOAL: [MessageHandler(filters.TEXT | filters.COMMAND, bot_instance.set_weekly_goal)],
            States.SET_DAILY_MINUTES: [MessageHandler(filters.TEXT | filters.COMMAND, bot_instance.set_daily_minutes)],
            States.SET_REMINDER: [CallbackQueryHandler(bot_instance.set_reminder, pattern="^set_reminder_")],
            States.SET_REMINDER_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot_instance.set_reminder_time)],
            States.CONFIRM_GOALS: [CallbackQueryHandler(bot_instance.confirm_goals, pattern="^confirm_goals_")]
        },
        fallbacks=[
            CommandHandler('cancel', bot_instance.cancel_operation),
            CallbackQueryHandler(bot_instance.back_to_main_menu, pattern="^back$")

        ],
        per_message=False
    )

    # 6. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–±–µ–∑ skip)
    stats_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Text([f"{Config.EMOJI['stats']} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]), bot_instance.show_stats)],
        states={
            States.STATS_MENU: [
                CallbackQueryHandler(bot_instance.show_full_report, pattern="^full_report$"),
                CallbackQueryHandler(bot_instance.show_charts, pattern="^show_charts$"),
                CallbackQueryHandler(bot_instance.setup_reports, pattern="^setup_reports$")
            ],
            States.REPORT_SETTINGS: [
                CallbackQueryHandler(bot_instance.set_report_frequency, pattern="^set_report_freq$"),
                CallbackQueryHandler(bot_instance.set_report_time, pattern="^set_report_time$")
            ]
        },
        fallbacks=[
            CallbackQueryHandler(bot_instance.back_to_stats_menu, pattern="^back$"),
            CommandHandler('cancel', bot_instance.cancel_operation)
        ],
        per_message=False
    )

    return book_conv, search_conv, my_books_conv, notes_conv, goals_conv, stats_conv

def main():
    env_path = Path(__file__).parent / '.env'
    load_dotenv(env_path)

    bot = BookBot()
    application = Application.builder().token(os.getenv("TELEGRAM_TOKEN")).build()

    handlers = setup_conversation_handlers(bot)

    application.add_handler(CommandHandler("start", bot.start))

    application.add_handler(handlers[0])  # book_conv
    application.add_handler(handlers[1])  # search_conv
    application.add_handler(handlers[2])  # my_books_conv
    application.add_handler(handlers[3])  # notes_conv
    application.add_handler(handlers[4])  # goals_conv
    application.add_handler(handlers[5])  # stats_conv

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_main_menu))

    application.run_polling()

if __name__ == "__main__":
    main()
