from telebot import TeleBot
from concurrent.futures import ThreadPoolExecutor
from telebot.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    InputMediaPhoto,
) 
from bot import TelegramBot, User, time, Book, Report, Note, Quote, Union, datetime
from typing import Callable, final
from supabase import Client
import re


def init_bot(app: TeleBot, connection, BOT_TOKEN: str):
    bot = TelegramBot(connection)

    user_messages = {}

    def delete_previous_messages(user_id, chat_id):
        key = (user_id, chat_id)
        if key not in user_messages:
            return

        for msg_id in user_messages[key]:
            try:
                app.delete_message(chat_id=chat_id, message_id=msg_id)
            except:
                continue

        user_messages[key] = []

    def send_menu(message: Message, command_type: str):
        menu = [
            [
                InlineKeyboardButton("–ö–Ω–∏–≥–∏", callback_data="start_books"),
                InlineKeyboardButton("–ó–∞–º–µ—Ç–∫–∏", callback_data="start_notes"),
                InlineKeyboardButton("–¶–∏—Ç–∞—Ç—ã", callback_data="start_quotes"),
            ],
            [
                InlineKeyboardButton("–¶–µ–ª–∏", callback_data="start_goals"),
                InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="start_statistic"),
                InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="start_help"),
            ],
        ]

        if command_type == "menu":
            text = "–í–æ—Ç –º–æ–µ –º–µ–Ω—é."
        else:
            text = f"–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–∏—Ç–∞—Ç–µ–ª—å—Å–∫–∏–π –¥–Ω–µ–≤–Ω–∏–∫! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ."

        msg = app.send_message(
            chat_id=message.chat.id,
            text=text,
            reply_markup=InlineKeyboardMarkup(menu),
        )

        bot.create_user(
            User(username=message.from_user.username, chat_id=message.chat.id)
        )

        key = (message.from_user.id, message.chat.id)
        if key not in user_messages:
            user_messages[key] = []
        user_messages[key].append(msg.message_id)

    @app.message_handler(commands=["start"])
    def command_start(message: Message):
        delete_previous_messages(message.from_user.id, message.chat.id)
        send_menu(message, "start")

    @app.message_handler(commands=["menu"])
    def command_menu(message: Message):
        delete_previous_messages(message.from_user.id, message.chat.id)
        send_menu(message, "menu")

    def goals(app: TeleBot, bot: TelegramBot):
        message_to_delete = [0]

        @app.callback_query_handler(func=lambda call: call.data == "start_goals")
        def handle_start_goals(call: CallbackQuery):
            app.answer_callback_query(call.id)
            goals_start(call.message)

        def goals_start(message: Message):
            if bot.get_user(message.chat.id).monthly_goal == -1:
                msg = app.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=message.message_id,
                    text="–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –∑–∞ –≥–æ–¥.",
                    reply_markup=None,
                )
                app.register_next_step_handler(msg, goals_year)
            else:
                app.delete_message(message.chat.id, message.message_id)
                goals_confirmation(message)

        def goals_n(
            message: Message,
            func_next: Callable,
            func_repeat: Callable,
            attribute: str,
            reply: str,
        ):
            try:
                number = int(message.text)
                if number < 0:
                    raise ValueError

                bot.update_user_attribute(
                    User(username=message.from_user.username, chat_id=message.chat.id),
                    attribute,
                    number,
                )

                msg = app.send_message(message.chat.id, reply)
                app.register_next_step_handler(msg, func_next)
            except ValueError:
                msg = app.send_message(message.chat.id, "–≠—Ç–æ –Ω–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
                app.register_next_step_handler(msg, func_repeat)

        def goals_year(message: Message):
            goals_n(
                message,
                goals_month,
                goals_year,
                "annual_goal",
                "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –∑–∞ –º–µ—Å—è—Ü.",
            )

        def goals_month(message: Message):
            goals_n(
                message,
                goals_week,
                goals_month,
                "monthly_goal",
                "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –∑–∞ –Ω–µ–¥–µ–ª—é.",
            )

        def goals_week(message: Message):
            goals_n(
                message,
                goals_day,
                goals_week,
                "weekly_goal",
                "–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–µ–ª–∏—Ç—å –Ω–∞ —á—Ç–µ–Ω–∏–µ?",
            )

        def goals_day(message: Message):
            try:
                number = int(message.text)
                if number < 0:
                    raise ValueError

                bot.update_user_attribute(
                    User(username=message.from_user.username, chat_id=message.chat.id),
                    "daily_goal",
                    number,
                )

                goals_confirmation(message)
            except ValueError:
                msg = app.send_message(message.chat.id, "–≠—Ç–æ –Ω–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
                app.register_next_step_handler(msg, goals_day)

        def goals_reminder_check(message: Message):
            if message.text == "y":
                msg = app.send_message(
                    chat_id=message.chat.id,
                    text="–í–≤–µ–¥–∏—Ç–µ –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–ß–ß:–ú–ú).",
                )
                app.register_next_step_handler(msg, goals_reminder_set)
            elif message.text == "n":
                goals_confirmation(message)
            else:
                app.send_message(message.chat.id, "–í–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
                app.register_next_step_handler(message, goals_reminder_check)

        def goals_reminder_set(message: Message):
            if re.fullmatch(r"^([01]?[0-9]|2[0-3]):[0-5][0-9]$", message.text):
                bot.update_user_attribute(
                    User(message.from_user.username, message.chat.id),
                    "reminder",
                    time(
                        int(message.text.split(":")[0]),
                        int(message.text.split(":")[1]),
                    ),
                )
                goals_confirmation(message)
            else:
                msg = app.send_message(
                    chat_id=message.chat.id,
                    text="–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é.",
                )
                app.register_next_step_handler(msg, goals_reminder_set)

        def goals_confirmation(message: Message):
            user = bot.get_user(message.chat.id)

            if user:
                reminder_text = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n-–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {user.reminder}" if user.reminder else ""

                msg = app.send_message(
                chat_id=message.chat.id,
                text=f"–í–∞—à–∏ —Ü–µ–ª–∏:\n"
                    f"- –ö–Ω–∏–≥ –∑–∞ –≥–æ–¥: {user.annual_goal}\n"
                    f"- –ö–Ω–∏–≥ –∑–∞ –º–µ—Å—è—Ü: {user.monthly_goal}\n"
                    f"- –ö–Ω–∏–≥ –∑–∞ –Ω–µ–¥–µ–ª—é: {user.weekly_goal}\n"
                    f"- –ú–∏–Ω—É—Ç –≤ –¥–µ–Ω—å: {user.daily_goal}\n\n"
                    f"{reminder_text}\n\n"
                    f"–í—Å–µ –≤–µ—Ä–Ω–æ? (y/n)\n",
                )

            else:
                msg = app.send_message(
                    chat_id=message.chat.id,
                    text="–ó–∞–≥–ª—É—à–∫–∞, –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–ª—å–∑—è, –¥–∞ - –≤—ã—Ö–æ–¥ –≤ –º–µ–Ω—é, –Ω–µ—Ç - –ø–æ–≤—Ç–æ—Ä (y/n)",
                )

            app.register_next_step_handler(msg, goals_reminder_confirmation_check)

            message_to_delete[0] = msg

        def goals_reminder_confirmation_check(message: Message):
            if message.text == "y":
                app.send_message(message.chat.id, "–¶–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
            elif message.text == "n":
                print("—Ç—É—Ç–∞")
                user = bot.get_user(message.chat.id)
                bot.update_user_attribute(user, "monthly_goal", -1)
                msg = app.send_message(message.chat.id, ".")
                goals_start(msg)
            else:
                msg = app.send_message(
                    message.chat.id, "–í–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
                )
                app.register_next_step_handler(msg, goals_reminder_confirmation_check)

    def help(app: TeleBot):
        @app.callback_query_handler(func=lambda call: call.data == "start_help")
        def handle_start_help(call: CallbackQuery):
            app.answer_callback_query(call.id)
            app.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"–ß–∏—Ç–∞—Ç–µ–ª—å—Å–∫–∏–π –¥–Ω–µ–≤–Ω–∏–∫ - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –∫–Ω–∏–≥!\n\n"
            "üìö –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
            "- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π\n"
            "- –í–µ–¥–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –∏ —Ü–∏—Ç–∞—Ç\n"
            "- –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–π –ø–æ —á—Ç–µ–Ω–∏—é\n"
            "- –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π —á–∏—Ç–∞—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º.",
            )

    def statistic(app: TeleBot, bot: TelegramBot):
        @app.callback_query_handler(func=lambda call: call.data == "start_statistic")
        def handle_start_statistic(call: CallbackQuery):
            app.answer_callback_query(call.id)
            books = bot.get_books(call.message.chat.id)
            statistic_analyse(call.message, books)
            statistic_report(call.message)

        def statistic_analyse(message: Message, books: list[Book]):
            if books:
                text = (
                    f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.\n"
                    f"1. –ü—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ –∫–Ω–∏–≥ –∑–∞ –≥–æ–¥: {bot.get_books_over_year(books)}\n"
                    f"2. –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {bot.get_books_mid_rating(books)}\n"
                    f"3. –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∂–∞–Ω—Ä—ã:\n"
                )

                for key_value in bot.get_books_popular_genres(books):
                    text += f"\t{key_value[0]} - {key_value[1]}\n"

                app.edit_message_text(
                    chat_id=message.chat.id, message_id=message.message_id, text=text
                )
            else:
                app.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=message.message_id,
                    text="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥.",
                )
        from typing import Tuple
        def statistic_report(message):
            reports: Tuple[Report, Report] = bot.get_report(message.chat.id)
            try:
                progress = reports[0].pages_read / reports[1].pages_read * 100
            except Exception as e:
                progress = 0

            if progress != 0:
                text = f"–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é.\n"
                f"-–ü—Ä–æ—á–∏—Ç–∞–Ω–æ –∫–Ω–∏–≥: {reports[0].books_read} ({reports[0].pages_read} —Å—Ç—Ä.)\n"
                f"-–ù–æ–≤—ã–µ —Ü–∏—Ç–∞—Ç—ã: {reports[0].quotes_added}\n"
                f"–ù–∞ {progress if progress < 100 else progress - 100}%{f' –º–µ–Ω–µ–µ' if progress < 100 else ''} –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏.\n"
            else:
                text = "–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
            app.send_message(
                chat_id=message.chat.id,
                text=text,
            )

    def notes(app: TeleBot, bot: TelegramBot):
        @app.callback_query_handler(func=lambda call: call.data == "start_notes")
        def handle_start_notes(call: CallbackQuery):
            app.answer_callback_query(call.id)
            handle_start_notes_first_message(call.message)

        def handle_start_notes_first_message(message: Message):
            books = bot.get_books(message.chat.id)
            if books:
                text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:\n"
                for number, book in enumerate(books):
                    text += f"{number + 1}. {book.author} - {book.title}\n"
                msg = app.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=message.message_id,
                    text=text,
                    reply_markup=None,
                )
                app.register_next_step_handler(
                    msg, lambda message: notes_check_book(message, books)
                )
            else:
                app.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=message.message_id,
                    text="–£ –≤–∞—Å –Ω–µ—Ç –∫–Ω–∏–≥. –ü–æ–∫–∞ —á—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É.",
                    reply_markup=None,
                )

        def notes_check_book(message: Message, books: list[Book]):
            try:
                number = int(message.text)
                if number < 1 or number > len(books):
                    msg = app.send_message(
                        chat_id=message.chat.id,
                        text="–ö–Ω–∏–≥–∏ —Å —Ç–∞–∫–∏–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    )
                    app.register_next_step_handler(
                        msg, lambda message: notes_check_book(message, books)
                    )
                else:
                    msg = app.send_message(
                        chat_id=message.chat.id, text="–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –∫ –∫–Ω–∏–≥–µ."
                    )
                    app.register_next_step_handler(
                        msg,
                        lambda message: notes_get_opinion(message, books[number - 1]),
                    )
            except ValueError:
                msg = app.send_message(
                    chat_id=message.chat.id,
                    text="–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.",
                )
                app.register_next_step_handler(
                    msg, lambda message: notes_check_book(message, books)
                )

        def notes_get_opinion(message: Message, book: Book):
            note = Note(message.chat.id, book.book_id, None, message.text)

            msg = app.send_message(
                chat_id=message.chat.id,
                text="–û—Ç–∑—ã–≤ –ø–æ–ª—É—á–µ–Ω. –ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–µ –ø–æ 10-–±–∞–ª—å–Ω–æ–π —à–∫–∞–ª–µ.",
            )

            app.register_next_step_handler(
                msg, lambda message: notes_check_rating(message, note)
            )

        def notes_check_rating(message: Message, note: Note):
            try:
                rating = int(message.text)
                if rating < 1 or rating > 10:
                    msg = app.send_message(
                        chat_id=message.chat.id,
                        text="–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    )
                    app.register_next_step_handler(
                        msg, lambda message: notes_check_rating(message, note)
                    )
                else:
                    note.rating = rating
                    msg = app.send_message(
                        chat_id=message.chat.id,
                        text=f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:\n"
                        f"–û—Ç–∑—ã–≤: {note.opinion}\n"
                        f"–†–µ–π—Ç–∏–Ω–≥: {note.rating}/10\n\n"
                        f"–í—Å–µ –≤–µ—Ä–Ω–æ? (y/n)",
                    )
                    app.register_next_step_handler(
                        msg, lambda message: notes_confirmation(message, note)
                    )
            except ValueError:
                msg = app.send_message(
                    chat_id=message.chat.id,
                    text="–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.",
                )
                app.register_next_step_handler(
                    msg, lambda message: notes_check_rating(message, note)
                )

        def notes_confirmation(message: Message, note: Note):
            if message.text == "y":
                bot.create_note(note)
                app.send_message(
                    chat_id=message.chat.id, text="–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."
                )
            elif message.text == "n":
                msg = app.send_message(
                    chat_id=message.chat.id, text="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–∫–∏."
                )
                handle_start_notes_first_message(msg)
            else:
                msg = app.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ y –∏–ª–∏ n.")
                app.register_next_step_handler(
                    msg, lambda message: notes_confirmation(message, note)
                )

    def quotes(app: TeleBot, bot: TelegramBot):
        @app.callback_query_handler(func=lambda call: call.data == "start_quotes")
        def handle_start_quotes(call: CallbackQuery):

            app.answer_callback_query(call.id)
            handle_start_quotes_first_message(call.message)

        def handle_start_quotes_first_message(message: Message):
            books = bot.get_books(message.chat.id)
            if books:
                text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:\n"
                for number, book in enumerate(books):
                    text += f"{number + 1}. {book.author} - {book.title}\n"
                msg = app.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=message.message_id,
                    text=text,
                    reply_markup=None,
                )
                app.register_next_step_handler(
                    msg, lambda message: quotes_check_book(message, books)
                )
            else:
                app.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=message.message_id,
                    text="–£ –≤–∞—Å –Ω–µ—Ç –∫–Ω–∏–≥. –ü–æ–∫–∞ —á—Ç–æ —ç—Ç–∞ –æ–ø—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                    reply_markup=None,
                )

        def quotes_check_book(message: Message, books: list[Book]):
            try:
                number = int(message.text)
                if number < 1 or number > len(books):
                    msg = app.send_message(
                        chat_id=message.chat.id,
                        text="–ö–Ω–∏–≥–∏ —Å —Ç–∞–∫–∏–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    )
                    app.register_next_step_handler(
                        msg, lambda message: quotes_check_book(message, books)
                    )
                else:
                    msg = app.send_message(
                        chat_id=message.chat.id,
                        text="1. –î–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É.\n" "2. –°–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç.",
                    )
                    app.register_next_step_handler(
                        msg,
                        lambda message: quotes_add_or_list(message, books[number - 1]),
                    )
            except ValueError:
                msg = app.send_message(
                    chat_id=message.chat.id,
                    text="–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.",
                )
                app.register_next_step_handler(
                    msg, lambda message: quotes_check_book(message, books)
                )

        def quotes_add_or_list(message: Message, book: Union[Book, Quote]):
            if message.text == "1":
                msg = app.send_message(
                    chat_id=message.chat.id,
                    text="–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ç–∞—Ç—É.",
                )
                app.register_next_step_handler(
                    msg, lambda message: quotes_register_text(message, book)
                )
            elif message.text == "2":
                quotes = bot.get_quotes(book)
                text = f"–°–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç:\n"
                for number, quote in enumerate(quotes):
                    text += f'{number+1}. "{quote.text} —Å—Ç—Ä. {quote.page_number}"'
                if not quotes:
                    text += "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
                app.send_message(
                    chat_id=message.chat.id,
                    text=text,
                )
            else:
                msg = app.send_message(
                    chat_id=message.chat.id, text="–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2."
                )
                app.register_next_step_handler(
                    msg, lambda message: quotes_add_or_list(message, book)
                )

        def quotes_register_text(message: Message, book: Union[Book, Quote]):
            if isinstance(book, Book):
                quote = Quote(
                    book_id=book.book_id,
                    user_id=None,
                    page_number=None,
                    text=message.text,
                    chat_id=message.chat.id,
                )
            else:
                quote = book
                quote.text = message.text

            msg = app.send_message(chat_id=message.chat.id, text="–£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.")

            app.register_next_step_handler(
                msg, lambda message: quotes_register_page(message, quote)
            )

        def quotes_register_page(message: Message, quote: Quote):
            try:
                number = int(message.text)
                if number < 1:
                    msg = app.send_message(
                        chat_id=message.chat.id,
                        text="–≠—Ç–æ –Ω–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    )
                    app.register_next_step_handler(
                        msg, lambda message: quotes_register_page(message, quote)
                    )
                else:
                    quote.page_number = number
                    msg = app.send_message(
                        chat_id=message.chat.id,
                        text=f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:\n"
                        f'"{quote.text}" —Å—Ç—Ä. {quote.page_number}\n\n'
                        f"–í—Å–µ –≤–µ—Ä–Ω–æ? (y/n)",
                    )
                    app.register_next_step_handler(
                        msg, lambda message: quotes_confirmation(message, quote)
                    )
            except ValueError:
                msg = app.send_message(
                    chat_id=message.chat.id, text="–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                app.register_next_step_handler(
                    msg, lambda message: quotes_confirmation(message, quote)
                )

        def quotes_confirmation(message: Message, quote: Quote):
            if message.text == "y":
                bot.create_quote(quote)
                app.send_message(
                    chat_id=message.chat.id, text="–¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."
                )
            elif message.text == "n":
                msg = app.send_message(
                    chat_id=message.chat.id,
                    text="–î–æ–±–∞–≤—å—Ç–µ —Ü–∏—Ç–∞—Ç—É –∑–∞–Ω–æ–≤–æ.\n" "–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ç–∞—Ç—É.",
                )
                app.register_next_step_handler(
                    msg, lambda message: quotes_register_text(message, quote)
                )
            else:
                msg = app.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ y –∏–ª–∏ n.")
                app.register_next_step_handler(
                    msg, lambda message: quotes_confirmation(message, quote)
                )

    def books(app: TeleBot, bot: TelegramBot):
        def books_menu(message: Message):
            msg = app.edit_message_text(
                chat_id=message.chat.id,
                message_id=message.message_id,
                text=f"1. –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É.\n"
                f"2. –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏\n"
                f"3. –ú–æ–∏ –∫–Ω–∏–≥–∏\n"
                f"4. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É.\n"
                f"5. –ù–∞–∑–∞–¥\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø—Ü–∏–∏",
            )
            app.register_next_step_handler(msg, books_menu_options)

        @app.callback_query_handler(func=lambda call: call.data == "start_books")
        def handle_start_books(call: CallbackQuery):
            app.answer_callback_query(call.id)
            books_menu(call.message)

        def books_menu_options(message: Message):
            try:
                option = int(message.text)
                match option:
                    case 1:
                        books_add(message)
                    case 2:
                        books_search(message)
                    case 3:
                        books_users_books(message)
                    case 4:
                        books_pick_to_edit(message)
                    case 5:
                        app.send_message(
                            chat_id=message.chat.id,
                            text="–í—ã–±–µ—Ä–∏—Ç–µ /menu –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
                        )
                    case _:
                        msg = app.send_message(
                            chat_id=message.chat.id,
                            text="–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        )
                        app.register_next_step_handler(msg, books_menu_options)
            except ValueError:
                msg = app.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä.")
                app.register_next_step_handler(msg, books_menu_options)

        def books_add(message: Message):
            msg = app.send_message(
                chat_id=message.chat.id,
                text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏.",
            )
            app.register_next_step_handler(msg, books_add_title)

        def books_add_title(message: Message):
            book = Book()
            
            book.title = message.text
            msg = app.send_message(
                chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞. (–§–æ—Ä–º–∞—Ç: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ))"
            )
            app.register_next_step_handler(
                msg, lambda message: books_add_author(message, book)
            )

        def books_add_author(message: Message, book: Book):
            try:
                file_info = app.get_file(message.voice.file_id)
                file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}"
                book.author = bot.voice_to_speech(file_url)
            except AttributeError:
                author = message.text
                if len(author.split(" ")) not in [2, 3]:
                    msg = app.send_message(
                        chat_id=message.chat.id,
                        text="–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç—Ä–∏ –∏–ª–∏ –¥–≤–∞ —Å–ª–æ–≤–∞."
                    )
                    app.register_next_step_handler(msg, lambda message: books_add_author(message, book))
                    return
                book.author = author
                site_book = bot.get_book_from_side_site(book)
                msg = app.send_message(
                    chat_id=message.chat.id,
                    text=f"–ù–∞–∑–≤–∞–Ω–∏–µ: {site_book.title}\n"
                    f"–ê–≤—Ç–æ—Ä: {site_book.author}\n"
                    f"–ñ–∞–Ω—Ä: {site_book.genre}\n"
                    f"–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è: {site_book.year}\n\n"
                    f"–≠—Ç–æ –∫–Ω–∏–≥–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å? (y/n)",
            )
            app.register_next_step_handler(
                msg, lambda message: books_first_confirmation(message, book, site_book)
            )

        def books_first_confirmation(message: Message, book: Book, site_book: Book):
            if message.text == "y":
                msg = app.send_message(
                        chat_id=message.chat.id,
                        text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–Ω–∏–≥–∏: \n"
                        "1. –ß–∏—Ç–∞—é —Å–µ–π—á–∞—Å\n"
                        "2. –ü—Ä–æ—á–∏—Ç–∞–Ω–æ\n"
                        "3. –û—Ç–ª–æ–∂–µ–Ω–æ\n",
                    )
                book = site_book
                app.register_next_step_handler(
                    msg, lambda message: books_status(message, book)
                )
            elif message.text == "n":
                msg = app.send_message(
                    chat_id=message.chat.id,
                    text="–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–æ–≥–¥–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–ª—è —Å–∞–º–∏.\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:\n"
                    "1. –ö–ª–∞—Å—Å–∏–∫–∞\n"
                    "2. –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞\n"
                    "3. –î–µ—Ç–µ–∫—Ç–∏–≤\n"
                    "4. –†–æ–º–∞–Ω\n"
                    "5. –ù–∞—É–∫–∞\n"
                    "6. –î—Ä—É–≥–æ–µ (–ø—Ä–∏ –≤—ã–±–æ—Ä–µ —ç—Ç–æ–π –æ–ø—Ü–∏–∏ –Ω–∞–¥–æ –±—É–¥–µ—Ç –≤–≤–µ—Å—Ç–∏ –∂–∞–Ω—Ä —Å–∞–º–æ–º—É)\n",
                )
                app.register_next_step_handler(
                    msg, lambda message: books_genre_choice(message, book)
                )
            else:
                msg = app.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ y –∏–ª–∏ n")
                app.register_next_step_handler(
                    msg, lambda message: books_first_confirmation(message, book)
                )

        def books_genre_choice(message: Message, book: Book):
            try:
                number = int(message.text)
                match number:
                    case 1:
                        book.genre = "–ö–ª–∞—Å—Å–∏–∫–∞"
                    case 2:
                        book.genre = "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞"
                    case 3:
                        book.genre = "–î–µ—Ç–µ–∫—Ç–∏–≤"
                    case 4:
                        book.genre = "–†–æ–º–∞–Ω"
                    case 5:
                        book.genre = "–ù–∞—É–∫–∞"
                    case 6:
                        msg = app.send_message(
                            chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä."
                        )
                        app.register_next_step_handler(
                            msg, lambda message: books_genre_user_input(message, book)
                        )
                        return
                    case _:
                        msg = app.send_message(
                            chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6."
                        )
                        app.register_next_step_handler(
                            msg, lambda message: books_genre_choice(message, book)
                        )
                        return
                msg = app.send_message(
                    chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –∏–∑–¥–∞–Ω–∏—è."
                )
                app.register_next_step_handler(
                    msg, lambda message: books_year(message, book)
                )

            except ValueError:
                msg = app.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
                app.register_next_step_handler(
                    msg, lambda message: books_genre_choice(message, book)
                )

        def books_genre_user_input(message: Message, book: Book):
            book.genre = message.text
            msg = app.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –∏–∑–¥–∞–Ω–∏—è.")
            app.register_next_step_handler(
                msg, lambda message: books_year(message, book)
            )

        def books_year(message: Message, book: Book):
            try:
                year = int(message.text)
                if year < 0 or year > datetime.now().year:
                    msg = app.send_message(
                        chat_id=message.chat.id,
                        text=f"–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –Ω–∞—à–µ–π —ç—Ä—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–π {datetime.now().year}",
                    )
                    app.register_next_step_handler(
                        msg, lambda message: books_year(message, book)
                    )
                else:
                    msg = app.send_message(
                    chat_id=message.chat.id,
                    text=f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:\n"
                        f"1. –ß–∏—Ç–∞—é —Å–µ–π—á–∞—Å.\n"
                        f"2. –ü—Ä–æ—á–∏—Ç–∞–Ω–æ.\n"
                        f"3. –û—Ç–ª–æ–∂–µ–Ω–æ.\n"
                    )
                    book.year = year
                    app.register_next_step_handler(
                        msg, lambda message: books_status(message, book)
                    )
            except ValueError:
                msg = app.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
                app.register_next_step_handler(
                    msg, lambda message: books_year(message, book)
                )
        def books_status(message: Message, book: Book):
            try:
                number = int(message.text)
                match number:
                    case 1:
                        book.status = "–ß–∏—Ç–∞—é —Å–µ–π—á–∞—Å"
                    case 2:
                        book.status = "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ"
                    case 3:
                        book.status = "–û—Ç–ª–æ–∂–µ–Ω–æ"
                    case _:
                        msg = app.send_message(
                            chat_id=message.chat.id,
                            text="–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –æ—Ç 1 –¥–æ 3",
                        )
                        app.register_next_step_handler(
                            msg, lambda message: books_status(message, book)
                        )
                        return
                msg = app.send_message(
                    chat_id=message.chat.id,
                    text=f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: \n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {book.title}\n"
                    f"–ê–≤—Ç–æ—Ä: {book.author}\n"
                    f"–ñ–∞–Ω—Ä: {book.genre}\n"
                    f"–ì–æ–¥: {book.year}\n"
                    f"–°—Ç–∞—Ç—É—Å: {book.status}\n\n"
                    f"–í—Å–µ –≤–µ—Ä–Ω–æ? (y/n)",
                )
                app.register_next_step_handler(
                    msg, lambda message: books_final_confirmation(message, book)
                )
            except ValueError:
                msg = app.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
                app.register_next_step_handler(
                    msg, lambda message: books_status(message, book)
                )

        def books_final_confirmation(message: Message, book: Book):
            if message.text == "y":
                bot.create_book(book, message.chat.id)
                app.send_message(chat_id=message.chat.id, text="–ö–Ω–∏–≥–∞ —Å–æ–∑–¥–∞–Ω–∞.")
            elif message.text == "n":
                msg = app.send_message(
                    chat_id=message.chat.id,
                    text="–í–≤–µ–¥–∏–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ.\n" "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏.",
                )
                app.register_next_step_handler(msg, books_add_title)
            else:
                msg = app.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ y –∏–ª–∏ n.")
                app.register_next_step_handler(
                    msg, lambda message: books_final_confirmation(message, book)
                )

        def books_search(message: Message):
            msg = app.send_message(
                chat_id=message.chat.id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–∞–∫–æ–º—É –ø–æ–ª—é, –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –ø–æ–∏—Å–∫:\n"
                "1. –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é.\n"
                "2. –ü–æ –∞–≤—Ç–æ—Ä—É.\n"
                "3. –ü–æ –∂–∞–Ω—Ä—É.\n"
                "4. –ü–æ –≥–æ–¥—É.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø—Ü–∏–∏.",
            )
            app.register_next_step_handler(msg, books_search_get_type)

        def books_search_get_type(message: Message):
            try:
                number = int(message.text)
                if number < 1 or number > 4:
                    msg = app.send_message(
                        chat_id=message.chat.id,
                        text="–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    )
                    app.register_next_step_handler(msg, books_search_get_type)
                elif number == 4:
                    msg = app.send_message(
                        chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞."
                    )
                    app.register_next_step_handler(msg, books_search_return_by_year)
                else:
                    match number:
                        case 1:
                            text = "–Ω–∞–∑–≤–∞–Ω–∏–µ."
                        case 2:
                            text = "–∞–≤—Ç–æ—Ä–∞."
                        case 3:
                            text = "–∂–∞–Ω—Ä."
                    msg = app.send_message(
                        chat_id=message.chat.id,
                        text="–í–≤–µ–¥–∏—Ç–µ " + text,
                    )
                    app.register_next_step_handler(
                        msg, lambda message: books_search_return_by_str(message, number)
                    )
            except ValueError:
                msg = app.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
                app.register_next_step_handler(msg, books_search_get_type)

        def books_search_return_by_str(message: Message, type: int):
            books = bot.get_books(message.chat.id)
            to_send_back: list[Book] = []
            for book in books:
                if type == 1:
                    to_send_back.append(book) if book.title == message.text else None
                elif type == 2:
                    to_send_back.append(book) if book.author == message.text else None
                else:
                    to_send_back.append(book) if book.genre == message.text else None

            if to_send_back:
                text="–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:\n"
                for i in range(len(to_send_back)):
                    text += f"{i+1}. {to_send_back[i].author} - {to_send_back[i].title}\n"
                    note = bot.get_note(message.chat.id, book.book_id)
                    if note:
                        text += f"\t–ó–∞–º–µ—Ç–∫–∞: {note.opinion}\n"
                        text += f"\t–†–µ–π—Ç–∏–Ω–≥: {note.rating}/10\n"
                app.send_message(chat_id=message.chat.id, text=text)
            else:
                app.send_message(chat_id=message.chat.id, text="–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        def books_search_return_by_year(message: Message):
            try:
                year = int(message.text)
                if year < 0 or year > datetime.now().year:
                    msg = app.send_message(
                        chat_id=message.chat.id,
                        text="–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –Ω–∞—à–µ–π —ç—Ä—ã, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–π —Ç–µ–∫—É—â–∏–π.",
                    )
                    app.register_next_step_handler(msg, books_search_return_by_year)
                else:
                    books = bot.get_books(message.chat.id)
                    to_send_back: list[Book] = []
                    for book in books:
                        to_send_back.append(book) if book.year == year else None

                    if to_send_back:
                        app.send_message(
                            chat_id=message.chat.id,
                            text="–ö–Ω–∏–≥–∏, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ –¥–∞–Ω–Ω–æ–º—É –≥–æ–¥—É:",
                        )
                        for i in range(len(to_send_back) // 3 + 1):
                            text = ""
                            media = []
                            for j in range(0 + 3 * (i), 3 + 3 * (i)):
                                if j >= len(to_send_back):
                                    break
                                media.append(
                                    InputMediaPhoto(media=to_send_back[j].cover)
                                )
                                note = bot.get_note(
                                    message.chat.id, to_send_back[j].book_id
                                )
                                text += (
                                    f"{j + 1}. {to_send_back[j].title} - {to_send_back[j].author}\n"
                                    f"–†–µ–π—Ç–∏–Ω–≥: {note.rating if note else '–Ω–µ—Ç'}\n"
                                    f"–ó–∞–º–µ—Ç–∫–∞: {note.opinion if note else '–Ω–µ—Ç'}\n\n"
                                )
                            media[0 + 3 * (i)].caption = text
                            app.send_media_group(chat_id=message.chat.id, media=media)
                    else:
                        app.send_message(
                            chat_id=message.chat.id,
                            text="–ö–Ω–∏–≥–∏ —Å —Ç–∞–∫–∏–º –≥–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                        )

            except ValueError:
                msg = app.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
                app.register_next_step_handler(msg, books_search_return_by_year)

        def books_users_books(message: Message):
            books = bot.get_books(message.chat.id)

            if len(books):
                print("–¢—É—Ç–∞")
                sorted_by_status = {
                    "–ß–∏—Ç–∞—é —Å–µ–π—á–∞—Å": 0,
                    "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ": 0,
                    "–û—Ç–ª–æ–∂–µ–Ω–æ": 0,
                }
                for book in books:
                    sorted_by_status[book.status] += 1

                text = "–í–∞—à–∏ –∫–Ω–∏–≥–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É:\n"
                for key, value in sorted_by_status.items():
                    text += f"{key}: {value}\n"

                app.send_message(chat_id=message.chat.id, text=text)

                text = "–í—Å–µ –≤–∞—à–∏ –∫–Ω–∏–≥–∏:\n"
                for number, book in enumerate(books):
                    text += f"{number+1}. {book.author} - {book.title}\n"

                app.send_message(chat_id=message.chat.id, text=text)
            else:
                app.send_message(
                    chat_id=message.chat.id,
                    text="–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥.",
                )

        def books_pick_to_edit(message: Message):
            books = bot.get_books(message.chat.id)
            if books:
                text = "–í—Å–µ –≤–∞—à–∏ –∫–Ω–∏–≥–∏ (–≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, 0 —á—Ç–æ–±—ã –≤—ã–π—Ç–∏):\n"
                for number, book in enumerate(books):
                    text += f"{number + 1}. {book.author} - {book.title}\n"

                msg = app.send_message(chat_id=message.chat.id, text=text)

                app.register_next_step_handler(
                    msg, lambda message: books_edit_book(message, books)
                )

        def books_edit_book(message: Message, books: list[Book]):
            try:
                number = int(message.text)
                if number < 0 or number > len(books):
                    msg = app.send_message(
                        chat_id=message.chat.id,
                        text="–¢–∞–∫–æ–π –∫–Ω–∏–≥–∏ –Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    )
                    app.register_next_step_handler(
                        msg, lambda message: books_edit_book(message, books)
                    )
                elif number == 0:
                    app.send_message(
                        chat_id=message.chat.id, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
                    )
                else:
                    book = books[number - 1]
                    text = (
                        f"–î–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:\n"
                        f"1. –ù–∞–∑–≤–∞–Ω–∏–µ: {book.title}\n"
                        f"2. –ê–≤—Ç–æ—Ä: {book.author}\n"
                        f"3. –ñ–∞–Ω—Ä: {book.genre}\n"
                        f"4. –ì–æ–¥: {book.year}\n"
                        f"5. –°—Ç–∞—Ç—É—Å: {book.status}\n\n"
                        f"–ö–∞–∫–æ–µ –ø–æ–ª–µ —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?"
                    )

                    msg = app.send_message(chat_id=message.chat.id, text=text)

                    app.register_next_step_handler(
                        msg, lambda message: books_attribute_edit(message, book)
                    )
            except ValueError:
                msg = app.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä.")
                app.register_next_step_handler(
                    msg, lambda message: books_edit_book(message, books)
                )

        def books_attribute_edit(message: Message, book: Book):
            try:
                number = int(message.text)
                match number:
                    case 1 | 2 | 3:
                        msg = app.send_message(
                            chat_id=message.chat.id,
                            text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è.",
                        )
                        app.register_next_step_handler(
                            msg, lambda message: books_edit_str(message, book, number)
                        )
                    case 4:
                        msg = app.send_message(
                            chat_id=message.chat.id,
                            text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ–¥ –≤—ã—Ö–æ–¥–∞ –∫–Ω–∏–≥–∏.",
                        )
                        app.register_next_step_handler(
                            msg, lambda message: books_edit_num(message, book)
                        )
                    case 5:
                        msg = app.send_message(
                            chat_id=message.chat.id,
                            text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∫–Ω–∏–≥–∏. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã:\n"
                            f"1. –ß–∏—Ç–∞—é —Å–µ–π—á–∞—Å.\n"
                            f"2. –ü—Ä–æ—á–∏—Ç–∞–Ω–æ.\n"
                            f"3. –û—Ç–ª–æ–∂–µ–Ω–æ.\n\n"
                            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä.",
                        )
                        app.register_next_step_handler(
                            msg, lambda message: books_edit_status(message, book)
                        )
                    case _:
                        msg = app.send_message(
                            chat_id=message.chat.id,
                            text="–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        )
                        app.register_next_step_handler(
                            msg, lambda message: books_attribute_edit(message, book)
                        )

            except ValueError:
                msg = app.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä.")
                app.register_next_step_handler(
                    msg, lambda message: books_attribute_edit(message, book)
                )

        def books_edit_status(message: Message, book: Book):
            try:
                number = int(message.text)
                match number:
                    case 1:
                        book.status = "–ß–∏—Ç–∞—é —Å–µ–π—á–∞—Å"
                    case 2:
                        book.status = "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ"
                    case 3:
                        book.status = "–û—Ç–ª–æ–∂–µ–Ω–æ"
                    case _:
                        msg = app.send_message(
                            chat_id=message.chat.id,
                            text="–¢–∞–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        )
                        app.register_next_step_handler(
                            msg, lambda message: books_edit_status(message, book)
                        )
                        return
                msg = app.send_message(
                    chat_id=message.chat.id,
                    text=f"–ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.\n"
                    f"–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—è? (y/n)",
                )
                app.register_next_step_handler(
                    msg, lambda message: books_edit_confirmation(message, book)
                )
            except ValueError:
                msg = app.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä.")
                app.register_next_step_handler(
                    msg, lambda message: books_attribute_edit(message, book)
                )

        def books_edit_num(message: Message, book: Book):
            try:
                number = int(message.text)
                if number < 0 or number > datetime.now().year:
                    msg = app.send_message(
                        chat_id=message.chat.id,
                        text="–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    )
                    app.register_next_step_handler(
                        msg, lambda message: books_edit_num(message, book)
                    )
                else:
                    book.year = number
                    msg = app.send_message(
                        chat_id=message.chat.id,
                        text=f"–ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.\n"
                        f"–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—è? (y/n)",
                    )
                    app.register_next_step_handler(
                        msg, lambda message: books_edit_confirmation(message, book)
                    )
            except ValueError:
                msg = app.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
                app.register_next_step_handler(
                    msg, lambda message: books_edit_num(message, book)
                )

        def books_edit_str(message: Message, book: Book, choice: int):
            match choice:
                case 1:
                    book.title = message.text
                case 2:
                    book.author = message.text
                case 3:
                    book.genre = message.text
            msg = app.send_message(
                chat_id=message.chat.id,
                text=f"–ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.\n" f"–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—è? (y/n)",
            )
            app.register_next_step_handler(
                msg, lambda message: books_edit_confirmation(message, book)
            )

        def books_edit_confirmation(message: Message, book: Book):
            if message.text == "y":
                msg = app.send_message(
                    chat_id=message.chat.id,
                    text=f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–Ω–æ–≤–æ.\n"
                    f"–î–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:\n"
                    f"1. –ù–∞–∑–≤–∞–Ω–∏–µ: {book.title}\n"
                    f"2. –ê–≤—Ç–æ—Ä: {book.author}\n"
                    f"3. –ñ–∞–Ω—Ä: {book.genre}\n"
                    f"4. –ì–æ–¥: {book.year}\n"
                    f"5. –°—Ç–∞—Ç—É—Å: {book.status}\n\n"
                    f"–ö–∞–∫–æ–µ –ø–æ–ª–µ —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?",
                )
                app.register_next_step_handler(
                    msg, lambda message: books_attribute_edit(message, book)
                )
            elif message.text == "n":
                bot.update_book(book)
                app.send_message(
                    chat_id=message.chat.id,
                    text=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {book.title}\n"
                    f"–ê–≤—Ç–æ—Ä: {book.author}\n"
                    f"–ñ–∞–Ω—Ä: {book.genre}\n"
                    f"–ì–æ–¥: {book.year}\n"
                    f"–°—Ç–∞—Ç—É—Å: {book.status}",
                )
            else:
                msg = app.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ y –∏–ª–∏ n.")
                app.register_next_step_handler(
                    msg, lambda message: books_attribute_edit(message, book)
                )

    goals(app, bot)
    statistic(app, bot)
    help(app)
    notes(app, bot)
    quotes(app, bot)
    books(app, bot)

    with ThreadPoolExecutor(max_workers=2) as executor:
        executor.submit(bot.generate_reports)
        print("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        executor.submit(app.polling)


if __name__ == "__main__":
    pass
